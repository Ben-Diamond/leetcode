books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]]
#width,height
shelfWidth = 4
"""We want to place these books in order onto bookcase shelves that have a total width shelfWidth.

We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.

Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.

    For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.

Return the minimum possible height that the total bookshelf can be after placing shelves in this manner."""
#place books down, if the book is taller than the last one then split the paths
class Solution:



    def minHeightShelves(self, books, shelfWidth: int) -> int:
        def newShelf(path,book):
            path2 = path.copy()
            path2["height"] += book[1]
            path2["shelfHeight"] = book[1]
            path2["width"] = book[0]
            return path2
        
        def checkBest(height,bookNumber,ends):
            # print(height,bookNumber,ends)
            if height not in ends:
                ends[height] = bookNumber
                return True, ends
            if ends[height] >= bookNumber: #this one is worse
                return False,ends
            ends[height] = bookNumber
            return True, ends
        
        def checkBest2(height,bookNumber,ends2):
            # print(height,bookNumber,ends2)
            if bookNumber not in ends2:
                ends2[bookNumber] = height
                return True, ends2
            if ends2[bookNumber] <= height: #this one is worse
                return False,ends2
            ends2[bookNumber] = height
            return True, ends2


        ends = {} #denotes the ends of shelves. height : bookNumber
        ends2 = {} #bookNumber : height
        lowest = 10e10
        newPaths = [{"height":books[0][1], "bookNumber": 0, "width": books[0][0],"shelfHeight":books[0][1]}]

        #add one to the path
        while len(newPaths) > 0:
            paths = newPaths.copy()
            newPaths = []
            # print(paths)
            for path in paths:
                

                if path["bookNumber"] == len(books) -1:
                    if path["height"] < lowest:
                        lowest = path["height"]
                        # print(lowest)
                    continue

                book = books[path["bookNumber"] + 1]
                result = path.copy()
                result["bookNumber"] += 1

                if book[1] <= result["shelfHeight"]: #add it to the end
                    if book[0] + result["width"] <= shelfWidth: #we can
                        result["width"] += book[0]
                        newPaths.append(result)
                    else: #we must make a new shelf
                        r,ends = checkBest(path["height"],path["bookNumber"],ends)
                        r2, ends2 = checkBest2(path["height"],path["bookNumber"],ends2)
                        if r and r2:
                            result = newShelf(result,book)
                            newPaths.append(result)
                else: #taller
                    if book[0] + result["width"] <= shelfWidth: #split paths
                        r,ends = checkBest(path["height"],path["bookNumber"],ends)
                        r2, ends2 = checkBest2(path["height"],path["bookNumber"],ends2)
                        if r and r2:
                            result2 = newShelf(result,book)
                            newPaths.append(result2)
                        

                        result["width"] += book[0]
                        result["height"] += book[1] - result["shelfHeight"] #it is taller
                        result["shelfHeight"] = book[1]
                        newPaths.append(result)

                    else: #we must make a new shelf
                        
                        r,ends = checkBest(path["height"],path["bookNumber"],ends)
                        r2, ends2 = checkBest2(path["height"],path["bookNumber"],ends2)
                        if r and r2:
                            result = newShelf(result,book)
                            newPaths.append(result)
        return lowest
                        


    





import time
solver = Solution.__new__ #somehow this works
st = time.time()

b=[[424,399],[301,845],[569,86],[225,252],[240,860],[436,377],[115,981],[424,824],[664,202],[464,669],[317,980],[413,607],[807,262],[88,238],[910,414],[631,17],[715,238],[256,129],[848,737],[905,977],[505,970],[790,988],[958,184],[42,458],[279,361],[78,30],[865,674],[854,212],[239,996],[98,61],[293,522],[312,201],[710,240],[530,311],[585,68],[701,873],[68,802],[54,173],[846,852],[177,283],[20,898],[479,910],[581,11],[469,442],[768,217],[129,426],[929,292],[325,883],[307,289],[896,304],[226,297],[802,25],[501,956],[986,567],[854,775],[418,818],[88,67],[678,115],[468,115],[522,778],[349,936],[957,310],[463,172],[232,993],[438,41],[961,977],[813,573],[668,474],[275,434],[243,854],[348,129],[797,853],[929,742],[660,429],[619,355],[471,485],[534,924],[992,278],[730,196],[162,456],[638,30],[416,447],[60,316],[690,20],[156,252],[934,824],[575,665],[549,849],[398,822],[568,475],[848,952],[309,331],[214,263],[289,779],[783,156],[313,716],[816,969],[944,427],[843,511],[979,780],[947,209],[730,765],[127,934],[20,122],[361,662],[962,473],[929,500],[405,303],[977,632],[335,364],[890,727],[920,228],[991,454],[278,288],[468,814],[576,398],[576,429],[297,229],[399,459],[798,453],[772,287],[803,262],[679,329],[889,924],[85,988],[941,566],[194,278],[877,873],[225,603],[84,61],[24,968],[763,371],[619,690],[664,424],[524,91],[610,298],[896,239],[304,503],[276,413],[80,442],[256,275],[998,419],[359,97],[294,573],[361,143],[377,726],[569,905],[66,700],[723,278],[712,321],[405,854],[599,912],[262,111],[737,109],[974,130],[589,102],[701,840],[811,788],[61,756],[628,271],[707,676],[330,640],[598,661],[701,942],[253,277],[132,604],[638,819],[701,401],[697,62],[568,822],[14,365],[447,665],[491,227],[950,749],[171,715],[679,201],[423,552],[548,47],[610,10],[397,390],[404,394],[609,5],[842,895],[405,473],[816,302],[667,836],[206,292],[813,941],[905,228],[313,204],[723,672],[238,831],[36,935],[427,366],[325,566],[711,74],[622,846],[893,588],[345,899],[388,737],[673,785],[608,891],[906,613],[492,102],[667,269],[841,543],[798,782],[707,543],[480,765],[697,366],[815,996],[488,863],[15,99],[145,12],[677,146],[676,572],[343,303],[714,11],[127,702],[608,912],[192,869],[797,841],[366,674],[275,752],[843,548],[772,411],[765,746],[543,336],[978,397],[964,272],[337,19],[65,411],[50,762],[420,50],[854,307],[528,684],[27,985],[617,465],[863,16],[609,688],[760,16],[889,485],[294,143],[628,866],[796,822],[174,117],[783,414],[789,282],[734,709],[237,106],[623,654],[108,415],[45,89],[572,609],[598,160],[384,34],[70,542],[85,964],[661,629],[897,542],[76,735],[221,591],[417,131],[582,366],[253,601],[37,452],[122,320],[273,611],[864,899],[348,216],[206,905],[334,750],[863,659],[507,289],[323,766],[357,104],[332,941],[707,33],[717,268],[462,26],[532,71],[837,27],[246,899],[443,146],[188,466],[951,323],[357,451],[306,638],[281,260],[847,823],[388,749],[362,767],[633,97],[905,678],[56,897],[270,595],[721,819],[650,230],[238,592],[282,16],[363,568],[508,608],[509,358],[209,96],[94,457],[148,589],[996,128],[120,227],[878,76],[573,351],[914,988],[99,284],[559,147],[824,436],[832,798],[551,180],[762,711],[659,961],[873,50],[550,874],[523,98],[447,409],[986,820],[740,402],[402,699],[76,898],[297,662],[138,83],[519,411],[828,788],[453,547],[328,249],[98,767],[431,908],[315,968],[189,224],[732,699],[511,125],[404,386],[199,520],[310,430],[984,96],[117,866],[508,166],[64,976],[997,364],[219,28],[887,455],[530,546],[980,558],[887,503],[451,963],[576,879],[518,547],[394,738],[338,457],[203,54],[751,676],[622,926],[780,470],[420,525],[492,516],[339,563],[515,401],[126,154],[362,448],[547,312],[729,233],[304,673],[82,137],[286,525],[785,434],[645,790],[451,719],[907,4],[152,836],[667,322],[982,978],[785,586],[769,514],[997,287],[581,618],[817,553],[992,929],[720,551],[221,883],[780,460],[602,894],[976,944],[985,671],[976,297],[657,538],[821,448],[114,144],[561,414],[149,854],[126,523],[425,464],[229,443],[119,465],[289,834],[565,920],[18,127],[708,50],[855,955],[859,548],[583,958],[399,848],[102,794],[784,519],[437,248],[678,887],[810,710],[27,568],[457,92],[177,775],[963,830],[836,227],[702,783],[565,978],[454,451],[563,831],[349,354],[868,405],[553,929],[222,225],[148,752],[979,519],[195,387],[887,526],[153,336],[399,509],[497,484],[470,390],[40,658],[480,649],[699,182],[875,182],[484,942],[997,685],[692,765],[597,820],[953,921],[102,804],[336,393],[886,890],[513,75],[435,136],[266,556],[66,304],[409,441],[432,470],[275,936],[63,927],[884,394],[723,443],[533,26],[241,70],[209,491],[683,195],[285,974],[174,681],[148,664],[670,503],[597,784],[196,68],[179,663],[905,673],[994,406],[105,92],[93,840],[737,698],[124,11],[747,979],[315,503],[854,438],[964,484],[821,785],[631,728],[106,964],[355,325],[919,459],[932,980],[627,883],[230,687],[706,593],[15,883],[454,910],[324,836],[911,634],[734,799],[531,554],[991,494],[164,456],[303,16],[627,495],[364,67],[963,48],[305,266],[563,831],[391,251],[458,977],[571,208],[486,132],[992,961],[964,754],[900,593],[398,56],[554,928],[72,415],[791,607],[60,668],[510,927],[434,584],[815,860],[422,215],[485,357],[217,966],[604,504],[794,265],[924,742],[749,499],[960,183],[809,175],[285,756],[993,28],[799,205],[650,905],[894,726],[542,550],[634,230],[214,961],[69,872],[620,450],[614,278],[133,77],[834,929],[676,693],[825,829],[623,667],[399,181],[478,504],[787,264],[652,849],[747,458],[191,308],[88,265],[741,186],[469,156],[486,10],[947,185],[709,215],[309,359],[561,833],[230,392],[97,675],[984,597],[422,571],[452,440],[632,782],[780,42],[507,188],[63,197],[628,957],[691,301],[151,597],[971,581],[55,935],[434,842],[154,221],[12,307],[859,911],[299,310],[203,555],[958,476],[309,809],[65,231],[444,514],[843,967],[112,312],[89,751],[645,487],[894,173],[187,646],[452,917],[465,290],[88,818],[47,949],[517,849],[761,135],[925,500],[286,504],[752,184],[385,526],[727,733],[303,549],[657,457],[928,401],[746,991],[964,663],[947,425],[347,674],[728,338],[514,27],[320,732],[31,486],[856,720],[720,126],[731,973],[89,895],[150,607],[368,404],[517,129],[911,612],[862,202],[808,534],[794,59],[433,197],[150,464],[358,924],[299,836],[729,659],[545,252],[311,74],[307,128],[903,50],[824,595],[993,39],[751,243],[566,720],[724,511],[44,574],[234,452],[293,439],[195,354],[314,616],[304,364],[615,996],[922,428],[301,408],[681,832],[462,624],[867,23],[323,136],[426,271],[289,836],[332,957],[29,672],[687,231],[158,865],[56,397],[635,48],[738,426],[224,400],[673,20],[922,463],[778,646],[416,82],[245,215],[567,827],[812,301],[883,746],[893,573],[304,872],[664,356],[981,505],[325,802],[414,4],[221,383],[652,213],[540,671],[499,355],[425,280],[963,211],[746,450],[313,327],[163,306],[323,323],[552,758],[463,38],[130,148],[120,583],[645,329],[71,122],[430,474],[972,238],[192,123],[634,202],[475,54],[586,428],[567,437],[66,99],[19,837],[504,970],[894,228],[959,676],[637,235],[25,254],[743,154],[63,237],[910,733],[296,896],[30,310],[847,190],[525,836],[853,35],[269,90],[665,558],[472,769],[426,619],[323,784],[26,408],[336,807],[701,222],[786,639],[725,54],[532,644],[149,665],[385,731],[543,228],[520,935],[293,67],[772,269],[148,467],[627,909],[22,405],[503,624],[652,327],[989,167],[487,856],[957,819],[798,311],[745,898],[538,165],[534,192],[671,236],[887,412],[427,885],[52,124],[503,145],[70,459],[308,64],[810,491],[656,245],[839,938],[570,670],[621,450],[948,735],[222,695],[737,676],[633,904],[450,842],[235,50],[939,521],[582,687],[344,524],[315,307],[810,183],[491,660],[321,426],[255,933],[105,63],[369,907],[515,33],[950,420],[336,540],[303,32],[497,22],[597,776],[39,185],[677,785],[785,763],[706,24],[565,334],[771,503],[837,927],[690,314],[784,888],[853,393],[533,791],[27,551],[322,32],[265,196],[64,153],[717,398],[655,773],[987,337],[962,102],[770,732],[610,831],[136,594],[705,508],[221,290],[174,564],[375,557],[582,130],[494,161],[132,478],[189,518],[362,948],[773,898],[338,344],[643,840],[301,591],[125,358],[7,475],[747,118],[529,490],[290,27],[546,852],[567,94],[771,498],[8,453],[923,588],[26,653],[738,541],[36,976],[819,837],[690,825],[163,492],[135,992],[26,866],[102,741],[88,201],[933,648],[236,509],[303,147],[447,966],[999,194],[292,708],[893,510],[746,450],[923,513],[152,401],[187,709],[307,890],[699,570],[664,542],[105,913],[123,784],[754,724],[570,467],[928,371],[225,161],[238,190],[205,402],[40,335],[157,590],[940,784],[236,114],[109,408],[197,47],[626,876],[343,452],[97,198],[713,871],[641,444],[643,254],[845,930],[515,217],[800,642],[794,218],[56,262],[572,964],[839,456],[726,987],[541,1000],[916,487],[200,679],[421,839],[57,344],[461,687],[324,695],[874,528],[388,396],[370,952],[950,749],[926,119],[741,853],[582,234],[42,552],[586,141],[429,295],[242,16],[169,325],[264,533],[115,995],[227,323],[555,291],[240,896],[415,493],[391,365],[441,401],[552,419],[650,606],[474,465],[410,980],[107,512],[367,127],[472,789],[622,247],[575,343],[593,184],[846,788],[338,982],[61,650],[994,893],[207,45],[816,902],[845,262],[852,943],[340,829],[951,146],[688,650],[613,521],[401,935],[166,925],[962,143],[72,568],[694,642],[443,420],[771,735],[406,458],[988,592],[629,741],[863,709],[704,232],[822,288],[618,536],[456,65],[719,840],[519,864],[64,228],[944,564],[722,520],[581,405],[416,827],[967,79],[740,921],[67,649],[20,782],[962,892],[853,761],[841,286],[121,369],[791,407],[977,930],[144,270],[161,449],[452,811],[268,357],[332,720],[807,432],[960,152],[383,938],[766,167],[956,89],[606,408],[57,483],[340,391],[388,379],[10,358],[200,183],[299,48],[156,197],[422,14],[758,912],[225,941],[70,737],[194,144],[443,751],[776,356],[27,281],[228,217],[295,762],[327,667],[791,648],[190,492],[2,171],[507,324],[21,325],[365,369],[6,801],[868,279],[150,599],[985,28],[419,318],[173,956],[477,312],[179,502],[85,548],[296,611],[781,7],[613,723],[726,155],[705,344],[97,222],[385,326],[999,225],[826,912]]
# b=[[11,83],[170,4],[93,80],[155,163],[134,118],[75,14],[122,192],[123,154],[187,29],[160,64],[170,152],[113,179],[60,102],[28,187],[59,95],[187,97],[49,193],[67,126],[75,45],[130,160],[4,102],[116,171],[43,170],[96,188],[54,15],[167,183],[58,158],[59,55],[148,183],[89,95],[90,113],[51,49],[91,28],[172,103],[173,3],[131,78],[11,199],[77,200],[58,65],[77,30],[157,58],[18,194],[101,148],[22,197],[76,181],[21,176],[50,45],[80,174],[116,198],[138,9],[58,125],[163,102],[133,175],[21,39],[141,156],[34,185],[14,113],[11,34],[35,184],[16,132],[78,147],[85,170],[32,149],[46,94],[196,3],[155,90],[9,114],[117,119],[17,157],[94,178],[53,55],[103,142],[70,121],[9,141],[16,170],[92,137],[157,30],[94,82],[144,149],[128,160],[8,147],[153,198],[12,22],[140,68],[64,172],[86,63],[66,158],[23,15],[120,99],[27,165],[79,174],[46,19],[60,98],[160,172],[128,184],[63,172],[135,54],[40,4],[102,171],[29,125],[81,9],[111,197],[16,90],[22,150],[168,126],[187,61],[47,190],[54,110],[106,102],[55,47],[117,134],[33,107],[2,10],[18,62],[109,188],[113,37],[59,159],[120,175],[17,147],[112,195],[177,53],[148,173],[29,105],[196,32],[123,51],[29,19],[161,178],[148,2],[70,124],[126,9],[105,87],[41,121],[147,10],[78,167],[91,197],[22,98],[73,33],[148,194],[166,64],[33,138],[139,158],[160,19],[140,27],[103,109],[88,16],[99,181],[2,140],[50,188],[200,77],[73,84],[159,130],[115,199],[152,79],[1,172],[124,136],[117,138],[158,86],[193,150],[56,57],[150,133],[52,186],[21,145],[127,97],[108,110],[174,44],[199,169],[139,200],[66,48],[52,190],[27,86],[142,191],[191,79],[126,114],[125,100],[176,95],[104,79],[146,189],[144,78],[52,106],[74,74],[163,128],[34,181],[20,178],[15,107],[105,8],[66,142],[39,126],[95,59],[164,69],[138,18],[110,145],[128,200],[149,150],[149,93],[145,140],[90,170],[81,127],[57,151],[167,127],[95,89]]
print(Solution.minHeightShelves(solver,b,1000))

print(Solution.minHeightShelves(solver,[[1,3],[2,4],[3,2]]*500,20))
##668, 1.3

print(time.time()-st)